Class 1 - Cucumber

Cucumber -  it is a tool that supports BDD (Behaviour Driven Development)

Give - pre-condition
When - to perform action
And - supporting tag
Then -  expected result/outcome

US - 12345 - Search employee name
Given user is able to open Chrome browser
When user enters username and password
And user clicks on login button
Then user is navigated to dashboard page
When user clicks on PIM option and
And user clicks on employee list option
When user enters name in the employee name field
And user clicks on search button
Then user is able tp see the employee

US - 2345 - Search employee id
Given user is able to open Chrome browser
When user enters username and password
And user clicks on login button
Then user is navigated to dashboard page
When user clicks on PIM option and
And user clicks on employee list option
When user enters id in the employee id field
And user clicks on search button
Then user is able tp see the employee

Cucumber encourages code re-usability concept

Main folder --> The code to develop the application is written under main folder
We write two types of code. first to develop the application and second to test the application.

Test Folder --> The codes to test the application, we write under test folder.

Two things we have in every project
--> Coding - java
--> Non-Java - properties file. excel files etc.

Coding will be in one place
Non-java will be at another place

--> To write gherkin scenarios, we use features filess
Valid admin login
Given user is navigated to HRMS application
When user enter admin username and password
And clicks on login button
THen admin user is successfully loggen in

Scenario -- every scenario is considered as one test case.

Why we don't need System.setProperty()--- "driver/chromedriver.exe"
If the path is to webdriver -- it will fail, path is limited to one machine
Many times t is not compatible with browser
============================================================================

Class 2 - Cucumber
--Recap -- > Cucumber is a tool that supports Behaviour Driven Development.
-- Gherkin language is used with Cucumber.
-- Cucumber keywords are Feature, Scenario, Given, When, And, Then

What is framework:
--> It is an organized structure which allows us to write clean and maintainable code
--> Main folder is used to divide branch and it's normally used by developers.

Features Folder:


===========================================
Implicit wait relies on time.
Explicit wait relies on condition.
==========================================

Class 1 - Cucumber

Cucumber - it is a tool that supports BDD

Given - pre condition
When - to perform actions
And - supporting tag
Then - expected result/outcome


US - 2345 - Search employee by id
Given user is able to open chrome browser
When user enters username and password
And user clicks on login button
Then user is navigated to dashboard page
When user clicks on PIM option
And user clicks on employee list option
When user enters id in the employee id field
And user clicks on search button
Then user is able to see the employee

-- Cucumbers encourages code reusability concept

main - the code we write to develop the application, we write under main

develop the application
to test the application

test - the code we write to test the application, we write under test

2 things we have in every project

- coding - java
- non - java  - properties file, excel etc.

coding will be at one place
non java will be at another place


-- to write gherkin scenarios, we use feature files



Valid admin login
Given user is navigated to HRMS application
When user enters admin username and password
And clicks on login button
Then admin user is successfully logged in

scenario - every scenario is considered as one test case

why we don't need system.setproperty() -  "driver/chromedriver.exe"
if the path is incorrect to webdriver - it will fail, path is limited to one machine
many time it is not compatible with browser

we use webdrivermanager from now onwards


Class 2 -

--  Recap --
  -- Cucumber - it is a tool that supports BDD
  -- Gherkin language we use to write BDD
  -- Feature, Scenario, Given, When, Then, And

What is framework -
    -- it is an organized structure which allows us to write clean and maintainable code

    Feature file - declare steps in it

POM - page object model is a design pattern in which we create object repository

Class 3 -

-- recap --
    -- architecture of framework --
    -- utils - to keep all the utilities of our project such as constants, config reader
                common methods etc to reuse them.


    -- steps - all step definitions can be found under this package for the gherkin
    steps we used in feature file
    -- Pages -- POM -- to implement object repository and functions.

    Runner class - we use this class to execute all of our test cases

For pre condition and post condition in cucumber we have 2 annotations

Hooks -
@Before - this one we use for pre condition
@After - this one we use for post condition


-- hooks should always be mentioned under steps package


Background vs hooks

Hooks are applicable to all feature files
Background is applicable to just one feature file\

Hooks execute first then background executes then scenario executes and in the
end hooks executes again as post condition

class - 4

    -- recap --
        -- cucumber options in runner class -
        dry run - to quickly get the step definitions

    --whenever we write new scenario in feature file, we must set dryrun to true
    for step definition and then put this definition under steps package, after
    writing the code in it, again set dryrun to false and execute the script


        monochrome - when we set it to true, it removes irrelevant information
        or unreadable character from console while executing cucumber test cases.

        Hooks -
        pre-condition @Before
        post condition @After

        we must keep hooks class under steps package

        background - common steps in a feature file until flow is not broken

       it is applicable only to a feature file, every file can have a different background

       tags - to categorize our scenarios for execution

       what is data driver testing
        when we execute our script against multiple sets of data we call it data
        driven testing

Class 5 -
    -- recap --
        -- What is data driven testing?
        --


    Data table -

    examples table - works for complete scenario
    Data table - it works only for one step



Class 6
 --  recap --
    Data table -
    we use data table to achieve data driven testing

    2 types of data table -
    with headers - list of maps
    without headers - list

    excel file - spreadsheets

Homework - modify the details of the employee after adding it in the HRMS


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M7</version>
                <configuration>
                //we use inlcludes tag to run our runner classes
                //** means src folder/* means runner package and then file name
                    <includes>
                        <include>**/*RunnerClass.java</include>
                    </includes>
                </configuration>
            </plugin>






























